AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  PCI Application Service

Parameters:
  ServiceName:
    Type: "String"
  Environment:
    Type: String
    Default: "development"
    AllowedValues:
      - "development"
      - "staging"
      - "beta"
Globals:
  Function:
    Timeout: 3
    Handler: app.lambdaHandler
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    Layers:
      - !Ref AppLayers

Resources:
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/health-check/
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /health-check
            Method: get
            RestApiId: !Ref API

  AppLayers:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "pci-${ServiceName}-${Environment}-dependencies"
      Description: !Sub "Dependencies for pci-${ServiceName}-${Environment}-service"
      ContentUri: src/dependencies/
      CompatibleRuntimes:
        - nodejs14.x
      CompatibleArchitectures:
        - x86_64
      LicenseInfo: "MIT"
      RetentionPolicy: Retain

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub "PCIApiGateway-${ServiceName}-${Environment}"
      EndpointConfiguration: REGIONAL
      Domain:
        DomainName: !Sub "${ServiceName}-${Environment}.{{resolve:ssm:pci-api-services-domain:1}}"
        CertificateArn: "{{resolve:ssm:pci-api-services-cert-arn:1}}"
        Route53:
          HostedZoneId: "{{resolve:ssm:pci-domain-hosted-zone-id:1}}"

Outputs:
  API:
    Description: "API Gateway for the PCI Service"
    Value: !Ref API
    Export:
      Name: !Sub "${AWS::StackName}-api-gateway"
  Environment:
    Description: "Stack Environment"
    Value: !Sub "${Environment}"
  ServiceName:
    Description: "Service Name"
    Value: !Sub "${ServiceName}"
